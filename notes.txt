Deserializing a Serializable class will not invoke any constructors or any initializer block - even if they are static.

In a try-catch-finally it is the *LAST* return statement that wins.

When a type (MyClass) has a static method and a normal method with the same signature they will cause compile error.

Most I/O operations in Java throws IOException so this must be caught or catch one of it super classes.

Final variables in classes of basic types must be initialized by a initializer block or constructor - no default values.
Default values are set by the compiler after the constructor is run.

When an interface extends another it cannot declare a static method with the same name as an instance method in the super
interface - the reverse is allowed. Sub interfaces can declare instance methods that has the same name as a static method
in the super interface.

This also goes for classes. You cannot have two of the same method signatures in the same scope. 'static' keyword does not
affect the scope.

List.of(...) methods are basically the same as statically declared constants - do not allow nulls.

When making virtual call determination with objects and null is passed it will take the most specific method, which
means the method with the most specific class (lowest subclass).
Note that thi is different from the widening >> boxing >> varargs with primitive types.


TODO LIst

Java I/O - console

Modules services in modular applications

Concurrency

Streams and lamdas - parallel streams.

Sealed classes

I18N - Dateformat, NumberFormat

Generic classes creation and usage

OOA - Interfaces

Flow - if/else switch

Character and binary streams

Collection API